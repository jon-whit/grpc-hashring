// Code generated by MockGen. DO NOT EDIT.
// Source: hashring.go
//
// Generated by this command:
//
//	mockgen -source hashring.go -destination ./mocks/mock_hashring.go Hasher
//

// Package mock_hashring is a generated GoMock package.
package mock_hashring

import (
	reflect "reflect"

	hashring "github.com/jon-whit/grpc-hashring/hashring"
	gomock "go.uber.org/mock/gomock"
)

// MockMember is a mock of Member interface.
type MockMember struct {
	ctrl     *gomock.Controller
	recorder *MockMemberMockRecorder
}

// MockMemberMockRecorder is the mock recorder for MockMember.
type MockMemberMockRecorder struct {
	mock *MockMember
}

// NewMockMember creates a new mock instance.
func NewMockMember(ctrl *gomock.Controller) *MockMember {
	mock := &MockMember{ctrl: ctrl}
	mock.recorder = &MockMemberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMember) EXPECT() *MockMemberMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockMember) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMemberMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMember)(nil).String))
}

// MockHashring is a mock of Hashring interface.
type MockHashring struct {
	ctrl     *gomock.Controller
	recorder *MockHashringMockRecorder
}

// MockHashringMockRecorder is the mock recorder for MockHashring.
type MockHashringMockRecorder struct {
	mock *MockHashring
}

// NewMockHashring creates a new mock instance.
func NewMockHashring(ctrl *gomock.Controller) *MockHashring {
	mock := &MockHashring{ctrl: ctrl}
	mock.recorder = &MockHashringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashring) EXPECT() *MockHashringMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockHashring) AddMember(arg0 hashring.Member) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMember", arg0)
}

// AddMember indicates an expected call of AddMember.
func (mr *MockHashringMockRecorder) AddMember(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockHashring)(nil).AddMember), arg0)
}

// FindNearestN mocks base method.
func (m *MockHashring) FindNearestN(key []byte, n int) ([]hashring.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearestN", key, n)
	ret0, _ := ret[0].([]hashring.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearestN indicates an expected call of FindNearestN.
func (mr *MockHashringMockRecorder) FindNearestN(key, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearestN", reflect.TypeOf((*MockHashring)(nil).FindNearestN), key, n)
}

// RemoveMember mocks base method.
func (m *MockHashring) RemoveMember(arg0 hashring.Member) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMember", arg0)
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockHashringMockRecorder) RemoveMember(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockHashring)(nil).RemoveMember), arg0)
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Sum64 mocks base method.
func (m *MockHasher) Sum64(arg0 []byte) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum64", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Sum64 indicates an expected call of Sum64.
func (mr *MockHasherMockRecorder) Sum64(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum64", reflect.TypeOf((*MockHasher)(nil).Sum64), arg0)
}
